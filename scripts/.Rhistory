setwd("C:/Users/au583430/OneDrive - Aarhus universitet/Documents/GitHub/Static-Chambers-Aeris-Data/scripts")
# clear workspace
rm(list = ls())
source('packages.R')
source('load.R')
# cleaning data
setnames(dc, as.character(dc[1, ]))
dc <- dc[-1, ]
dc$start.N2O <- as.numeric(dc$start.N2O)
dc$end.N2O <- as.numeric(dc$end.N2O)
# selecting dc data for N2O
dc <- dc[! is.na(start.N2O), c('chamber', 'ID', 'begin.time', 'final.time', 'start.N2O', 'end.N2O')]
head(da)
colnames(da)
setnames(da, old = c('CO2 (ppm)', 'H2O (ppm)', 'N2O (ppm)'),
new = c( 'CO2', 'H2O', 'N2O'))
colnames(da)
# clear workspace
rm(list = ls())
source('packages.R')
source('load.R')
source('clean.R')
# adding rows with chamber, id and N2O info for between begin.time and final.time
# sequence function for one row
safe_seq <- function(from, to) {
# if to < from, return NA (or return reversed/empty based on preference)
if (to < from) return(as.POSIXct(NA_real_))
seq(from, to, by = '1 min')
}
# Expand row-by-row. Use rowid to ensure seq() gets scalars.
dc[, rowid := .I]
dcl <- dc[, {dcthis <- safe_seq(begin.time[1], final.time[1])
.(date.time = dcthis)},
by = .(rowid, chamber, ID, start.N2O, end.N2O)]
# drop helper rowid
dcl[, rowid := NULL]
# challenge that we have some measurements that start and stop on the same times.stamp
# because the resolution is minutes, not seconds....
# the times we have dublicates:
dcl[duplicated(date.time), unique(date.time)]
# making a full mearge, mening that when we have the same date.time for start and stop
# it will be dublicated
dt <- merge(da, dcl, by = "date.time", all.x = TRUE, allow.cartesian = TRUE)
# dropping Aeris data when not measured on chamber:
dt <- dt[!is.na(start.N2O)]
# calculate elapsed time pr measurement
# Making elapsed.time fit with the first measurement of each valve = 0
dt[, elapsed.time := difftime(date.time, min(date.time), units = "min"), by = .(chamber, ID)]
View(dt)
# calculate elapsed time pr measurement
# Making elapsed.time fit with the first measurement of each valve = 0
dt[, elapsed.time := difftime(date.time, min(date.time), units = "sec"), by = .(chamber, ID)]
# calculate elapsed time pr measurement
# Making elapsed.time fit with the first measurement of each valve = 0
dt[, elapsed.time := difftime(date.time, min(date.time), units = "sec"), by = .(chamber, ID)]
# calculate elapsed time pr measurement
# Making elapsed.time fit with the first measurement of each valve = 0
dt[, elapsed.time := difftime(date.time, min(date.time), units = "secs"), by = .(chamber, ID)]
dt[, elapsed.time := as.numeric(date.time - min(date.time)),
by = .(chamber, ID)]
# clear workspace
rm(list = ls())
source('packages.R')
source('load.R')
source('clean.R')
# adding rows with chamber, id and N2O info for between begin.time and final.time
# sequence function for one row
safe_seq <- function(from, to) {
# if to < from, return NA (or return reversed/empty based on preference)
if (to < from) return(as.POSIXct(NA_real_))
seq(from, to, by = '1 min')
}
# Expand row-by-row. Use rowid to ensure seq() gets scalars.
dc[, rowid := .I]
dcl <- dc[, {dcthis <- safe_seq(begin.time[1], final.time[1])
.(date.time = dcthis)},
by = .(rowid, chamber, ID, start.N2O, end.N2O)]
# drop helper rowid
dcl[, rowid := NULL]
# challenge that we have some measurements that start and stop on the same times.stamp
# because the resolution is minutes, not seconds....
# the times we have dublicates:
dcl[duplicated(date.time), unique(date.time)]
# making a full mearge, mening that when we have the same date.time for start and stop
# it will be dublicated
dt <- merge(da, dcl, by = "date.time", all.x = TRUE, allow.cartesian = TRUE)
# dropping Aeris data when not measured on chamber:
dt <- dt[!is.na(start.N2O)]
# calculate elapsed time pr measurement
# Making elapsed.time fit with the first measurement of each valve = 0
dt[, elapsed.time := difftime(date.time, min(date.time), units = "secs"), by = .(chamber, ID)]
# calculate elapsed time pr measurement
# Making elapsed.time fit with the first measurement of each valve = 0
dt[, elapsed.time := difftime(Datatime, min(Datatime), units = "secs"), by = .(chamber, ID)]
# plotting all
# adding chamber number data to HMRds
dt$date <- as.Date(dt$date.time)
unique_dates <- unique(dt$date)
for (d in unique_dates){
df_subset <- dt[dt$date == d, ]
p <- ggplot(df_subset, aes(elapsed.time, n2o)) +
geom_point() +
facet_wrap(~ chamber, scales = 'free_y') +
ggtitle(paste('N2O on', d)) +
theme_bw()
ggsave(filename = paste0('../plots/N2O check/N2O_free_y_', d, '.png'), plot = p, width = 10, height = 10)
}
# plotting all
# adding chamber number data to HMRds
dt$date <- as.Date(dt$date.time)
unique_dates <- unique(dt$date)
for (d in unique_dates){
df_subset <- dt[dt$date == d, ]
p <- ggplot(df_subset, aes(elapsed.time, n2o)) +
geom_point() +
facet_wrap(~ chamber, scales = 'free_y') +
ggtitle(paste('N2O on', d)) +
theme_bw()
ggsave(filename = paste0('../plots/N2O check/N2O_free_y_', d, '.png'), plot = p, width = 10, height = 10)
}
p <- ggplot(df_subset, aes(elapsed.time, N2O)) +
geom_point() +
facet_wrap(~ chamber, scales = 'free_y') +
ggtitle(paste('N2O on', d)) +
theme_bw()
# plotting all
# adding chamber number data to HMRds
dt$date <- as.Date(dt$date.time)
unique_dates <- unique(dt$date)
for (d in unique_dates){
df_subset <- dt[dt$date == d, ]
p <- ggplot(df_subset, aes(elapsed.time, N2O)) +
geom_point() +
facet_wrap(~ chamber, scales = 'free_y') +
ggtitle(paste('N2O on', d)) +
theme_bw()
ggsave(filename = paste0('../plots/N2O check/N2O_free_y_', d, '.png'), plot = p, width = 10, height = 10)
}
dt$elapsed.time <- as.numeric(dt$elapsed.time)
# plotting all
# adding chamber number data to HMRds
dt$date <- as.Date(dt$date.time)
unique_dates <- unique(dt$date)
for (d in unique_dates){
df_subset <- dt[dt$date == d, ]
p <- ggplot(df_subset, aes(elapsed.time, N2O)) +
geom_point() +
facet_wrap(~ chamber, scales = 'free_y') +
ggtitle(paste('N2O on', d)) +
theme_bw()
ggsave(filename = paste0('../plots/N2O check/N2O_free_y_', d, '.png'), plot = p, width = 10, height = 10)
}
View(dt)
p <- ggplot(df_subset, aes(elapsed.time, N2O)) +
geom_point() +
facet_wrap(~ chamber, scales = 'free') +
ggtitle(paste('N2O on', d)) +
theme_bw()
# plotting all
# adding chamber number data to HMRds
dt$date <- as.Date(dt$date.time)
unique_dates <- unique(dt$date)
for (d in unique_dates){
df_subset <- dt[dt$date == d, ]
p <- ggplot(df_subset, aes(elapsed.time, N2O)) +
geom_point() +
facet_wrap(~ chamber, scales = 'free') +
ggtitle(paste('N2O on', d)) +
theme_bw()
ggsave(filename = paste0('../plots/N2O check/N2O_free_y_', d, '.png'), plot = p, width = 10, height = 10)
}
for (d in unique_dates){
df_subset <- dt[dt$date == d, ]
p <- ggplot(df_subset, aes(elapsed.time, N2O)) +
geom_point() +
facet_wrap(~ chamber, scales = 'fixed') +
ggtitle(paste('N2O on', d)) +
theme_bw()
ggsave(filename = paste0('../plots/N2O check/N2O_fixed_y_', d, '.png'), plot = p, width = 10, height = 10)
}
# clear workspace
rm(list = ls())
source('packages.R')
source('load.R')
source('clean.R')
source('mearge.R')
source('plot.R')
# clear workspace
rm(list = ls())
source('packages.R')
source('load.R')
source('clean.R')
source('mearge.R')
source('plot.R')
